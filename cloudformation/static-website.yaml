---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static Website'

Parameters:
  HostedZoneStackName:
    Description: 'Name of stack creating the hosted zone'
    Type: String

  BucketName:
    Description: 'Name of S3 bucket'
    Type: String

  CertificateArn:
    Description: 'ARN of ACM certificate in us-east-1'
    Type: String

  SubDomainName:
    Description: 'Subdomain used to create DNS entry in hosted zone'
    Type: String
    Default: 'www.'

  ViewerRequestArn:
    Description: 'Optional: Lambda@Edge viewer request function ARN'
    Type: String
    Default: ''

  ViewerResponseArn:
    Description: 'Optional: Lambda@Edge viewer response function ARN'
    Type: String
    Default: ''

  OriginRequestArn:
    Description: 'Optional: Lambda@Edge origin request function ARN'
    Type: String
    Default: ''

  OriginResponseArn:
    Description: 'Optional: Lambda@Edge origin response function ARN'
    Type: String
    Default: ''

Conditions:
  HasViewerRequestArn: !Not [!Equals [!Ref ViewerRequestArn, '']]
  HasViewerResponseArn: !Not [!Equals [!Ref ViewerResponseArn, '']]
  HasOriginRequestArn: !Not [!Equals [!Ref OriginRequestArn, '']]
  HasOriginResponseArn: !Not [!Equals [!Ref OriginResponseArn, '']]

Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Status: Enabled
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Ref BucketName

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !GetAtt 'WebsiteBucket.Arn'
              - !Sub '${WebsiteBucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': false

  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketName}-logs'
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Status: Enabled
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${BucketName}-logs'

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub
          - '${SubDomainName}${HostedZoneName}'
          - SubDomainName: !Ref SubDomainName
            HostedZoneName: { 'Fn::ImportValue': !Sub '${HostedZoneStackName}-hosted-zone-name' }

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - { 'Fn::ImportValue': !Sub '${HostedZoneStackName}-hosted-zone-name' }
          - !Sub
            - '${SubDomainName}${HostedZoneName}'
            - SubDomainName: !Ref SubDomainName
              HostedZoneName: { 'Fn::ImportValue': !Sub '${HostedZoneStackName}-hosted-zone-name' }
        Comment: !Sub
          - '${SubDomainName}${HostedZoneName}'
          - SubDomainName: !Ref SubDomainName
            HostedZoneName: { 'Fn::ImportValue': !Sub '${HostedZoneStackName}-hosted-zone-name' }
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /404.html
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
          LambdaFunctionAssociations:
            - !If
              - HasViewerRequestArn
              - EventType: viewer-request
                LambdaFunctionARN: !Ref ViewerRequestArn
              - !Ref 'AWS::NoValue'
            - !If
              - HasViewerResponseArn
              - EventType: viewer-response
                LambdaFunctionARN: !Ref ViewerResponseArn 
              - !Ref 'AWS::NoValue'
            - !If
              - HasOriginRequestArn
              - EventType: origin-request
                LambdaFunctionARN: !Ref OriginRequestArn
              - !Ref 'AWS::NoValue'
            - !If
              - HasOriginResponseArn
              - EventType: origin-response
                LambdaFunctionARN: !Ref OriginResponseArn
              - !Ref 'AWS::NoValue'
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03
          TargetOriginId: s3origin
          ViewerProtocolPolicy: 'redirect-to-https'
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket: !Join ['', [!Ref LogsBucket, '.s3.amazonaws.com']]
          IncludeCookies: False
        Origins:
          - DomainName: !GetAtt 'WebsiteBucket.RegionalDomainName'
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: 'sni-only'
          MinimumProtocolVersion: TLSv1.2_2021

  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: { 'Fn::ImportValue': !Sub '${HostedZoneStackName}-hosted-zone-id' }
      RecordSets:
        - Name: { 'Fn::ImportValue': !Sub '${HostedZoneStackName}-hosted-zone-name' }
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt 'CloudFrontDistribution.DomainName'

  WwwRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: { 'Fn::ImportValue': !Sub '${HostedZoneStackName}-hosted-zone-id' }
      RecordSets:
        - Name: !Sub
            - '${SubDomainName}${HostedZoneName}'
            - SubDomainName: !Ref SubDomainName
              HostedZoneName: { 'Fn::ImportValue': !Sub '${HostedZoneStackName}-hosted-zone-name' }
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt 'CloudFrontDistribution.DomainName'

  DeploymentPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub
        - 'deployment policy for ${SubDomainName}${HostedZoneName}'
        - SubDomainName: !Ref SubDomainName
          HostedZoneName: { 'Fn::ImportValue': !Sub '${HostedZoneStackName}-hosted-zone-name' }
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:DeleteObject
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:List*
              - s3:PutObject
            Effect: Allow
            Resource:
              - !Sub ${WebsiteBucket.Arn}
              - !Sub ${WebsiteBucket.Arn}/*
          - Action:
              - cloudfront:CreateInvalidation
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

Outputs:
  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'

  WebsiteBucketName:
    Description: 'Name of the S3 bucket storing the static files'
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-bucket-name'

  LogsBucketName:
    Description: 'Name of the S3 bucket storing the static files'
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-logs-bucket-name'

  URL:
    Description: 'URL to static website'
    Value: !Sub
      - 'https://${SubDomainName}${HostedZoneName}'
      - SubDomainName: !Ref SubDomainName
        HostedZoneName: { 'Fn::ImportValue': !Sub '${HostedZoneStackName}-hosted-zone-name' }
    Export:
      Name: !Sub '${AWS::StackName}-url'

  DistributionId:
    Description: 'CloudFront distribution id'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-distribution-id'

  DeploymentPolicyArn:
    Description: 'ARN of deployment policy'
    Value: !Ref DeploymentPolicy
    Export:
      Name: !Sub '${AWS::StackName}-deployment-policy-arn'
